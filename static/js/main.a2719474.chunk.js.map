{"version":3,"sources":["tiles/Coord.ts","tiles/Collision.ts","tiles/Size.ts","GridTile.tsx","tiles/Direction.ts","tiles/Tile.ts","tiles/RegisterTiles.ts","tiles/Floor.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MoveCoord","c","direction","x","y","GetTileCoord","Math","floor","wallSize","doorSize","screenSize","max","window","innerWidth","innerHeight","tileViewDist","ceil","addEventListener","console","log","GridTile","props","a","b","tile","tileCoord","cameraCoord","centerX","centerY","abs","style","position","height","width","top","left","display","justifyContent","alignItems","color","backgroundColor","info","name","map","d","hasDoor","doors","has","opened","hasNeighbor","getWallPosition","bottom","right","undefined","GridWall","row","filler","flex","flexDirection","overflow","cursor","onClick","fillCoord","coord","RenderApp","Tile","initialDoors","rotation","this","Set","neededDoors","neededWalls","canPlace","forEach","r","t","rotate","hasCoord","rotatedDoors","door","add","allDirections","index","indexOf","length","Rotate","FourWay","TeeWay","Straight","LTurn","RTurn","DeadEnd","AllWay","copy","TwoWay","TileLibrary","Index","FirstFloor","grid","Map","getTile","get","hasTile","setTile","alert","set","fillTile","getCoord","neighbor","Opposite","matchingTiles","filter","newTile","random","Array","from","player","Player","hW","hH","zIndex","leftPressed","upPressed","rightPressed","downPressed","document","e","key","animate","item","hD","GetRoomCoord","roomX","roomY","leftWall","rightWall","topWall","bottomWall","HasRoomOrCreate","newCoord","CollidePlayerWithWalls","requestAnimationFrame","App","React","useState","setState","rerender","useCallback","useEffect","className","id","tiles","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRAOO,SAASA,EAAUC,EAAUC,GAA8B,IACxDC,EAASF,EAATE,EAAGC,EAAMH,EAANG,EAEX,OAAQF,GACN,IAAK,MACH,MAAO,CAAEC,IAAGC,EAAGA,EAAI,GACrB,IAAK,SACH,MAAO,CAAED,IAAGC,EAAGA,EAAI,GACrB,IAAK,QACH,MAAO,CAAED,EAAGA,EAAI,EAAGC,KACrB,IAAK,OACH,MAAO,CAAED,EAAGA,EAAI,EAAGC,MCclB,SAASC,EAAaJ,GAIzB,MAAO,CAAEE,EAFCG,KAAKC,OAAON,EAAEE,EADb,KCjCS,KDoCRC,EADFE,KAAKC,OAAON,EAAEG,EAFb,KCjCS,MCSjB,IAAMI,EAAW,GACXC,EAAW,GAGpBC,EAAaJ,KAAKK,IAAIC,OAAOC,WAAYD,OAAOE,aAChDC,EAAeT,KAAKU,KAAKN,EAAU,KAEvCE,OAAOK,iBAAiB,UAAU,WAChCP,EAAaJ,KAAKK,IAAIC,OAAOC,WAAYD,OAAOE,aAChDC,EAAeT,KAAKU,KAAKN,EAAU,KACnCQ,QAAQC,IAAI,oBAAqBJ,MAGnCG,QAAQC,IAAI,oBAAqBJ,GAE1B,IAAMK,EAAoD,SAAAC,GAAU,IHOnCC,EAAUC,EGNxCC,EAAgBH,EAAhBG,KAAMjB,EAAUc,EAAVd,MAGRkB,EAAY,CAAEtB,EAAGqB,EAAKrB,EAAGC,EAAGoB,EAAKpB,GACjCsB,EAAcrB,EAAa,CAAEF,EAAGwB,EAASvB,EAAGwB,IAClD,OHCsCN,EGDVG,EHCoBF,EGDTG,EHEhCpB,KAAKK,IAAIL,KAAKuB,IAAIP,EAAEnB,EAAIoB,EAAEpB,GAAIG,KAAKuB,IAAIP,EAAElB,EAAImB,EAAEnB,IGFAW,EAC7C,KAGF,yBACLe,MAAO,CACLC,SAAU,WACVC,ODrCkB,ICsClBC,MDtCkB,ICuClBC,IDvCkB,ICuCbV,EAAKpB,EAAgB,IAAMQ,OAAOE,YDvCrB,KCuC+Cc,EACjEO,KDxCkB,ICwCZX,EAAKrB,EAAgB,IAAMS,OAAOC,WDxCtB,KCwC+Cc,EACjES,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,MAAO,QAEPC,gBAAiB,YAElBhB,EAAKiB,KAAKC,KC7CN,CAAC,MAAO,QAAS,SAAU,QD8CfC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CACxBpB,KAAMA,EACNjB,MAAOA,EACPL,UAAW0C,EACXC,QAASrB,EAAKsB,MAAMC,IAAIH,GACxBI,OAAQxB,EAAKyB,YAAY1C,EAAOqC,UAKtC,SAASM,EAAgBhD,GACvB,IAAIgC,EAAuB,EACvBiB,EAA0B,EAC1BhB,EAAwB,EACxBiB,EAAyB,EAEzBnB,EAA4BzB,EAC5BwB,EAA6BxB,EAEjC,OAAQN,GACN,IAAK,MACHiD,EAAS,OACTlB,OAAQoB,EACR,MACF,IAAK,SACHnB,EAAM,OACND,OAAQoB,EACR,MACF,IAAK,QACHlB,EAAO,OACPH,OAASqB,EACT,MACF,IAAK,OACHD,EAAQ,OACRpB,OAASqB,EAIb,MAAO,CAAEnB,MAAKiB,SAAQhB,OAAMiB,QAAOnB,QAAOD,UAGrC,IAAMsB,EAA6G,SAAAjC,GAAU,IAC1HnB,EAA4CmB,EAA5CnB,UAAW8C,EAAiC3B,EAAjC2B,OAAQH,EAAyBxB,EAAzBwB,QAASrB,EAAgBH,EAAhBG,KAAMjB,EAAUc,EAAVd,MACpCgD,EAAmB,OAAbrD,GAAmC,UAAbA,EAC5BsD,EAAS,yBAAK1B,MAAO,CAAE2B,KAAM,OAAQjB,gBAAiB,OAAQR,OAAQuB,EAAM,YAASF,EAAWpB,MAAOsB,OAAMF,EAAY,UAE/H,OAAO,yBACLvB,MAAK,2BACAoB,EAAgBhD,IADhB,IAEH6B,SAAU,WACVK,QAAS,OACTsB,cAAeH,EAAM,MAAQ,SAC7BlB,eAAgB,SAChBC,WAAY,SACZqB,SAAU,YAEXH,EACAX,EACC,yBACEf,MAAO,CAAE8B,OAAQZ,OAASK,EAAY,UAAWrB,OAAQvB,EAAUwB,MAAOxB,EAAU+B,gBAAiBQ,EAAS,GAAK,QACnHa,QAASb,OAASK,EAAY,WAC5B9C,EAAMuD,UAAU9D,EAAUwB,EAAKuC,MAAO7D,IACtC8D,OAIF,KACHR,I,qBE1GQS,EAAb,WAQE,WAA4BxB,GAAiB,yBAAjBA,OAAgB,KALrCtC,EAAI,EAKiC,KAJrCC,EAAI,EAIiC,KAHpC8D,kBAGoC,OAFpCC,SAAW,EAEyB,IAClCrB,EAAUL,EAAVK,MACRsB,KAAKF,aAAe,IAAIG,IAAevB,GAV3C,qDAyBWwB,EAA6BC,GAAuC,IAAD,OAGtEC,GAAW,EAcf,OAbAF,EAAYG,SAAQ,SAAAvE,GACb,EAAK4C,MAAMC,IAAI7C,KAClBsE,GAAW,MAKfD,EAAYE,SAAQ,SAAAvE,GACd,EAAK4C,MAAMC,IAAI7C,KACjBsE,GAAW,MAIRA,IA1CX,2BA6COE,GACH,IAAMC,EAAI,IAAIV,EAAKG,KAAK3B,MAOxB,OANIiC,EACFC,EAAEC,OAAOF,GAGTC,EAAEC,OAAOR,KAAKD,UAETQ,IArDX,6BAwDSD,GAEL,OADAN,KAAKD,SAAWO,EAAI,EACbN,OA1DX,kCA6Dc7D,EAAcL,GAExB,OAAOK,EAAMsE,SAAS7E,EAAUoE,KAAKL,MAAO7D,MA/DhD,4BAcI,MAAO,CAAEC,EAAGiE,KAAKjE,EAAGC,EAAGgE,KAAKhE,KAdhC,4BAiB+B,IAAD,OACpB0E,EAAe,IAAIT,IAEzB,OADAD,KAAKF,aAAaO,SAAQ,SAAAM,GAAUD,EAAaE,IDV9C,SAAgB9E,EAAsBiE,GAC3C,IAAMc,EAjBC,CAAC,MAAO,QAAS,SAAU,QAkB5BC,EAAQD,EAAcE,QAAQjF,GACpC,OAAO+E,GAAeC,EAAQf,GAAYc,EAAcG,QCODC,CAAON,EAAM,EAAKZ,cAChEW,MApBX,KCRaQ,EAAU,IAAIrB,EAAK,CAAEvB,KAAM,UAAWI,MAAO,CAAC,MAAO,OAAQ,QAAS,YAC7EyC,EAAS,IAAItB,EAAK,CAAEvB,KAAM,SAAUI,MAAO,CAAC,MAAO,OAAQ,WAC3D0C,EAAW,IAAIvB,EAAK,CAAEvB,KAAM,WAAYI,MAAO,CAAC,MAAO,YACvD2C,EAAQ,IAAIxB,EAAK,CAAEvB,KAAM,QAASI,MAAO,CAAC,MAAO,WACjD4C,EAAQ,IAAIzB,EAAK,CAAEvB,KAAM,QAASI,MAAO,CAAC,MAAO,UACjD6C,EAAU,IAAI1B,EAAK,CAAEvB,KAAM,UAAWI,MAAO,CAAC,SAEpD,SAAS8C,EAAOpE,GACd,MAAO,CAACA,EAAMA,EAAKqE,KAAK,GAAIrE,EAAKqE,KAAK,GAAIrE,EAAKqE,KAAK,IAGtD,SAASC,EAAOtE,GACd,MAAO,CAACA,EAAMA,EAAKqE,KAAK,IAGnB,IAAME,EAAW,sBACnBD,EAAOR,IADY,YAEnBQ,EAAON,IAFY,YAGnBI,EAAOL,IAHY,YAInBK,EAAOH,IAJY,YAKnBG,EAAOF,IALY,YAMnBE,EAAOD,KCjBL,SAASK,EAAM7F,EAAWC,GAAa,MAAM,GAAN,OAAUD,EAAV,aAAgBC,GAEvD,IAmEM6F,EAAa,IAnE1B,WACE,WAA4BvD,GAAe,yBAAfA,OAAc,KAElCwD,KAAO,IAAIC,IAHrB,qDAMWlG,GAA8B,OAAOmE,KAAKgC,QAAQnG,EAAEE,EAAGF,EAAEG,KANpE,8BAOUD,EAAWC,GAA+B,OAAOgE,KAAK8B,KAAKG,IAAIL,EAAM7F,EAAGC,MAPlF,+BASWH,GAAqB,OAAOmE,KAAKkC,QAAQrG,EAAEE,EAAGF,EAAEG,KAT3D,8BAUUD,EAAWC,GAAsB,OAAOgE,KAAK8B,KAAKnD,IAAIiD,EAAM7F,EAAGC,MAVzE,+BAYWoB,EAAYvB,GAAYmE,KAAKmC,QAAQ/E,EAAMvB,EAAEE,EAAGF,EAAEG,KAZ7D,8BAaUoB,EAAYrB,EAAWC,GAC7B,GAAIgE,KAAKkC,QAAQnG,EAAGC,GAElB,MADAoG,MAAM,6BACA,sBAGRhF,EAAKrB,EAAIA,EACTqB,EAAKpB,EAAIA,EACTgE,KAAK8B,KAAKO,IAAIT,EAAM7F,EAAGC,GAAIoB,KArB/B,iFAiCYvB,GAAYmE,KAAKsC,SAASzG,EAAEE,EAAGF,EAAEG,KAjC7C,+BAkCWD,EAAWC,GAAY,IAAD,OAIvBkE,GH3CD,CAAC,MAAO,QAAS,SAAU,QG0CE3B,KAAI,SAAAC,GAAC,OAAI,EAAK+D,SAAS3G,EAAU,CAAEG,IAAGC,KAAKwC,OACzD,IAAIyB,KAClBE,EAAc,IAAIF,IH5CnB,CAAC,MAAO,QAAS,SAAU,QG8ChBI,SAAQ,SAAAvE,GACtB,IAAM0G,EAAW,EAAKD,SAAS3G,EAAU,CAAEG,IAAGC,KAAKF,IAC/C0G,IACEA,EAAS9D,MAAMC,IH9CpB,SAAkB7C,GACvB,OAAQA,GACN,IAAK,MACH,MAAO,SACT,IAAK,SACH,MAAO,MACT,IAAK,QACH,MAAO,OACT,IAAK,OACH,MAAO,SGqCkB2G,CAAS3G,IAC9BoE,EAAYU,IAAI9E,GAGhBqE,EAAYS,IAAI9E,OAKtBgB,QAAQC,IAAI,+BAAgCmD,EAAa,mBAAoBC,GAG7E,IAAMuC,EAAgBf,EAAYgB,QAAO,SAAAvF,GAAI,OAAIA,EAAKgD,SAASF,EAAaC,MAG5E,GAFArD,QAAQC,IAAI,8BAA+B2F,IAEtCA,EAAiB,KAAM,iCAE5B,IAAME,EAAUF,EAAcxG,KAAKC,MAAMD,KAAK2G,SAAWH,EAAc1B,SAASS,OAChF3E,QAAQC,IAAI,mBAAoB6F,GAChC5C,KAAKmC,QAAQS,EAAS7G,EAAGC,KA/D7B,4BAyBI,OAAO8G,MAAMC,KAAK/C,KAAK8B,MAAM,2DAzBjC,KAmE0B,CAAU,cACpCD,EAAWM,QAAQjB,EAAQO,OAAQ,EAAG,GCtE/B,IAAIlE,EAAU,EACVC,EAAU,EAEVoC,EAAY,aAEjBoD,EAAe,CACnBrF,SAAU,CAAE5B,EAAG,EAAGC,EAAG,GACrB4B,OAAQ,GACRC,MAAO,IAGT,SAASoF,IACP,IAAMC,EAAoB,GAAfF,EAAOnF,MACZsF,EAAqB,GAAhBH,EAAOpF,OAClB,OAAO,yBAAKF,MAAO,CACjBC,SAAU,WACVyF,OAAQ,GACRxF,OAAQoF,EAAOpF,OACfC,MAAOmF,EAAOnF,MACdO,gBAAiB,MACjBL,KAAK,cAAD,OAAgBmF,EAAhB,OACJlE,MAAM,cAAD,OAAgBkE,EAAhB,OACLpF,IAAI,cAAD,OAAgBqF,EAAhB,OACHpE,OAAO,cAAD,OAAgBoE,EAAhB,UAqCV,IAAIE,GAAc,EACdC,GAAY,EACZC,GAAe,EACfC,GAAc,EAElBC,SAAS5G,iBAAiB,WAAW,SAAA6G,GAEtB,KAATA,EAAEC,KAAuB,KAATD,EAAEC,KAAuB,aAATD,EAAEC,MACpCN,GAAc,EACdE,GAAe,GAEJ,KAATG,EAAEC,KAAsB,KAATD,EAAEC,KAAuB,cAATD,EAAEC,MACnCJ,GAAe,EACfF,GAAc,GAEH,KAATK,EAAEC,KAAsB,KAATD,EAAEC,KAAuB,WAATD,EAAEC,MACnCL,GAAY,EACZE,GAAc,GAEH,KAATE,EAAEC,KAAsB,KAATD,EAAEC,KAAuB,aAATD,EAAEC,MACnCH,GAAc,EACdF,GAAY,MAIhBG,SAAS5G,iBAAiB,SAAS,SAAA6G,GAEpB,KAATA,EAAEC,KAAuB,KAATD,EAAEC,KAAuB,aAATD,EAAEC,MACpCN,GAAc,GAEH,KAATK,EAAEC,KAAsB,KAATD,EAAEC,KAAuB,cAATD,EAAEC,MACnCJ,GAAe,GAEJ,KAATG,EAAEC,KAAsB,KAATD,EAAEC,KAAuB,WAATD,EAAEC,MACnCL,GAAY,GAED,KAATI,EAAEC,KAAsB,KAATD,EAAEC,KAAuB,aAATD,EAAEC,MACnCH,GAAc,OAMlB,SAASI,IACHP,IACFL,EAAOrF,SAAS5B,GAJF,GAMZwH,IACFP,EAAOrF,SAAS5B,GAPF,GASZuH,IACFN,EAAOrF,SAAS3B,GAVF,GAYZwH,IACFR,EAAOrF,SAAS3B,GAbF,GP7DX,SAAgC6H,EAAY1H,GAC/C,IACM+G,EAAK,GAAKW,EAAKhG,MACfsF,EAAK,GAAKU,EAAKjG,OACfkG,EAAK,GAAKzH,EAIVgB,EAAYpB,EAAa4H,EAAKlG,UAR0B,EAN3D,SAAsBkG,EAAYxG,GAGrC,MAAO,CAAEtB,EAFC8H,EAAKlG,SAAS5B,ECzCJ,IDyCSsB,EAAUtB,EAE3BC,EADF6H,EAAKlG,SAAS3B,EC1CJ,ID0CSqB,EAAUrB,GAaR+H,CAAaF,EAAMxG,GAAvC2G,EATmD,EAStDjI,EAAakI,EATyC,EAS5CjI,EAEZkI,EAAWhB,EAAK9G,EAVX,IAWL+H,GAAa,EAAID,EACjBE,EAAUjB,EAAK/G,EAZV,IAaLiI,GAAc,EAAID,EAElBhH,EAAI,OAAGjB,QAAH,IAAGA,OAAH,EAAGA,EAAOoG,SAASlF,GAK7B,SAASiH,EAAgB3E,EAAc7D,GAGnC,KAFgBsB,GAAQA,EAAKsB,MAAMC,IAAI7C,IAEvB,OAAO,EAEvB,IAAMyI,EAAW3I,EAAU+D,EAAO7D,GAKlC,OAJI,OAACK,QAAD,IAACA,OAAD,EAACA,EAAOsE,SAAS8D,KACZ,OAALpI,QAAK,IAALA,KAAOuD,UAAU6E,IAGd,EAKPP,GAASE,IACLhI,KAAKuB,IAAIwG,GAASH,IAAOQ,EAAgBjH,EAAW,WACpDwG,EAAKlG,SAAS5B,GAAKmI,EAAWF,GAGlCA,GAASG,IACLjI,KAAKuB,IAAIwG,GAASH,IAAOQ,EAAgBjH,EAAW,YACpDwG,EAAKlG,SAAS5B,GAAKoI,EAAYH,GAGnCC,GAASG,IACLlI,KAAKuB,IAAIuG,GAASF,IAAOQ,EAAgBjH,EAAW,UACpDwG,EAAKlG,SAAS3B,GAAKoI,EAAUH,GAGjCA,GAASI,IACLnI,KAAKuB,IAAIuG,GAASF,IAAOQ,EAAgBjH,EAAW,aACpDwG,EAAKlG,SAAS3B,GAAKqI,EAAaJ,GO2B1CO,CAAuBxB,EAAQnB,GAG/BtE,EAAUyF,EAAOrF,SAAS5B,EAC1ByB,EAAUwF,EAAOrF,SAAS3B,EAG1B4D,IACA6E,uBAAsB,kBAAMb,OAG9BA,GAEec,MAzGf,WAAgB,IAAD,EACQC,IAAMC,SAAS,GAA3BC,EADI,oBAEPC,EAAWH,IAAMI,aAAY,WACjCF,EAAS3I,KAAK2G,YACb,CAACgC,IAGJ,OADAF,IAAMK,WAAU,WAAQpF,EAAYkF,IAAa,CAACA,IAEhD,yBAAKG,UAAU,MAAMvH,MAAO,CAAE6B,SAAU,WAUtC,kBAAC0D,EAAD,MAEA,yBAAKiC,GAAG,aACLrD,EAAWsD,MAAM5G,KAAI,SAACnB,GAAD,OAAU,kBAAC,EAAD,CAC9BjB,MAAO0F,EACPzE,KAAMA,EACNuG,IAAK/B,EAAMxE,EAAKrB,EAAGqB,EAAKpB,WC9CdoJ,QACW,cAA7B5I,OAAO6I,SAASC,UAEe,UAA7B9I,OAAO6I,SAASC,UAEhB9I,OAAO6I,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrJ,QAAQqJ,MAAMA,EAAMC,c","file":"static/js/main.a2719474.chunk.js","sourcesContent":["import { Direction } from './Direction';\r\n\r\nexport interface Coord {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport function MoveCoord(c: Coord, direction: Direction): Coord {\r\n  const { x, y } = c;\r\n  // let neightbor: boolean; // Later we might want to be able to \"CLOSE\" doors again? skip for now.\r\n  switch (direction) {\r\n    case \"TOP\":\r\n      return { x, y: y - 1 };\r\n    case \"BOTTOM\":\r\n      return { x, y: y + 1 };\r\n    case \"RIGHT\":\r\n      return { x: x + 1, y };\r\n    case \"LEFT\":\r\n      return { x: x - 1, y };\r\n  }\r\n}\r\n\r\n// Distances ordered by their stupidness\r\nexport function Distance(a: Coord, b:Coord) {\r\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\r\n}\r\n\r\nexport function HammingDistance(a: Coord, b:Coord) {\r\n  return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\r\n}\r\n\r\nexport function EitherDirectionDistance(a: Coord, b:Coord) {\r\n  return Math.max(Math.abs(a.x - b.x), Math.abs(a.y - b.y));\r\n}","\r\n// ok how can we do... intersections and interactions?\r\n// #1 only can hit things in your room (or very rarely a neighboring room that is close by..)\r\n\r\nimport { doorSize, wallSize } from \"../GridTile\";\r\nimport { Coord, MoveCoord } from \"./Coord\";\r\nimport { Direction } from \"./Direction\";\r\nimport { Floor } from \"./Floor\";\r\nimport { tileSize } from \"./Size\";\r\n\r\nexport interface Item {\r\n    position: Coord,\r\n    height: number,\r\n    width: number,\r\n\r\n    //    movable?: boolean, // can it be pushed?\r\n    //mass?: number, // how heavy is it?\r\n\r\n    // Oh? What, you didn't think we would do PHYSICS?\r\n    // Fuck yeah we will.\r\n    //speedX: number,\r\n    //speedY: number,\r\n}\r\n\r\nvar items: Item[] = [];\r\n// yo if we stored these BY room it would be pretty cool.\r\n\r\nexport function AddItem(item: Item) {\r\n    items.push(item);\r\n}\r\n\r\n/** The TILE the item is in. */\r\nexport function GetTileCoord(c: Coord): Coord {\r\n    const hT = .5 * tileSize;\r\n    const x = Math.floor((c.x + hT) / tileSize);\r\n    const y = Math.floor((c.y + hT) / tileSize);\r\n    return { x, y };\r\n}\r\n\r\n/** The relative place in the current TILE the item is in. */\r\nexport function GetRoomCoord(item: Item, tileCoord: Coord): Coord {\r\n    const x = item.position.x - (tileCoord.x * tileSize);\r\n    const y = item.position.y - (tileCoord.y * tileSize);\r\n    return { x, y };\r\n}\r\n\r\nexport function CollidePlayerWithWalls(item: Item, floor?: Floor) {\r\n    const hT = .5 * tileSize;\r\n    const hW = .5 * item.width;\r\n    const hH = .5 * item.height;\r\n    const hD = .5 * doorSize;\r\n\r\n    // which TILE is it in?\r\n\r\n    const tileCoord = GetTileCoord(item.position);\r\n    const { x: roomX, y: roomY } = GetRoomCoord(item, tileCoord);\r\n\r\n    const leftWall = hW + wallSize - hT;\r\n    const rightWall = -1 * leftWall;\r\n    const topWall = hH + wallSize - hT;\r\n    const bottomWall = -1 * topWall;\r\n\r\n    const tile = floor?.getCoord(tileCoord);\r\n\r\n    //hasDoor={tile.doors.has(d)}\r\n    //opened={tile.hasNeighbor(floor, d)}\r\n\r\n    function HasRoomOrCreate(coord: Coord, direction: Direction) {\r\n        const hasDoor = tile && tile.doors.has(direction);\r\n\r\n        if (!hasDoor) { return false; }\r\n\r\n        const newCoord = MoveCoord(coord, direction);\r\n        if (!floor?.hasCoord(newCoord)) {\r\n            floor?.fillCoord(newCoord);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // TODO: stop the item's actual move speed too.\r\n    // TODO: Stop weirdness at the EDGE of doors.\r\n    if (roomX <= leftWall) {\r\n        if (Math.abs(roomY) > hD || !HasRoomOrCreate(tileCoord, \"LEFT\")) {\r\n            item.position.x += leftWall - roomX;\r\n        }\r\n    }\r\n    if (roomX >= rightWall) {\r\n        if (Math.abs(roomY) > hD || !HasRoomOrCreate(tileCoord, \"RIGHT\")) {\r\n            item.position.x += rightWall - roomX;\r\n        }\r\n    }\r\n    if (roomY <= topWall) {\r\n        if (Math.abs(roomX) > hD || !HasRoomOrCreate(tileCoord, \"TOP\")) {\r\n            item.position.y += topWall - roomY;\r\n        }\r\n    }\r\n    if (roomY >= bottomWall) {\r\n        if (Math.abs(roomX) > hD || !HasRoomOrCreate(tileCoord, \"BOTTOM\")) {\r\n            item.position.y += bottomWall - roomY;\r\n        }\r\n    }\r\n\r\n    // tile\r\n}","export const tileSize = 300;\r\n","import React from 'react';\r\nimport { EitherDirectionDistance, HammingDistance, MoveCoord } from './tiles/Coord';\r\nimport { Direction, AllDirections } from './tiles/Direction';\r\nimport { Tile } from './tiles/Tile';\r\nimport { centerY, centerX, RenderApp } from './App';\r\nimport { Floor } from \"./tiles/Floor\";\r\nimport { GetTileCoord } from './tiles/Collision';\r\nimport { tileSize } from './tiles/Size';\r\n\r\nexport const wallSize = 10;\r\nexport const doorSize = 48;\r\n\r\n// probably only update this on resize\r\nvar screenSize = Math.max(window.innerWidth, window.innerHeight);\r\nvar tileViewDist = Math.ceil(screenSize / (2 * tileSize));\r\n\r\nwindow.addEventListener('resize', ()=>{\r\n  screenSize = Math.max(window.innerWidth, window.innerHeight);\r\n  tileViewDist = Math.ceil(screenSize / (2 * tileSize));\r\n  console.log(\"Updated view dist\", tileViewDist);\r\n});\r\n\r\nconsole.log(\"Initial view dist\", tileViewDist);\r\n\r\nexport const GridTile: React.FC<{ tile: Tile; floor: Floor; }> = props => {\r\n  const { tile, floor } = props;\r\n\r\n  // check screen space if we should render it!\r\n  const tileCoord = { x: tile.x, y: tile.y };\r\n  const cameraCoord = GetTileCoord({ x: centerX, y: centerY });\r\n  if (EitherDirectionDistance(tileCoord, cameraCoord) > tileViewDist) {\r\n    return null;\r\n  }\r\n\r\n  return <div\r\n    style={{\r\n      position: \"absolute\",\r\n      height: tileSize,\r\n      width: tileSize,\r\n      top: tile.y! * tileSize + .5 * (window.innerHeight - tileSize) - centerY,\r\n      left: tile.x! * tileSize + .5 * (window.innerWidth - tileSize) - centerX,\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      color: \"white\",\r\n      //border: '5px solid black',\r\n      backgroundColor: \"#663333\",\r\n    }}>\r\n    {tile.info.name}\r\n    {AllDirections().map(d => <GridWall\r\n      tile={tile}\r\n      floor={floor}\r\n      direction={d}\r\n      hasDoor={tile.doors.has(d)}\r\n      opened={tile.hasNeighbor(floor, d)}\r\n    />)}\r\n  </div>;\r\n}\r\n\r\nfunction getWallPosition(direction: Direction) {\r\n  let top: string | number = 0;\r\n  let bottom: string | number = 0;\r\n  let left: string | number = 0;\r\n  let right: string | number = 0;\r\n\r\n  let width: number | undefined = wallSize;\r\n  let height: number | undefined = wallSize;\r\n\r\n  switch (direction) {\r\n    case \"TOP\":\r\n      bottom = \"auto\";\r\n      width = undefined;\r\n      break;\r\n    case \"BOTTOM\":\r\n      top = \"auto\";\r\n      width = undefined;\r\n      break;\r\n    case \"RIGHT\":\r\n      left = \"auto\";\r\n      height = undefined;\r\n      break;\r\n    case \"LEFT\":\r\n      right = \"auto\";\r\n      height = undefined;\r\n      break;\r\n  }\r\n\r\n  return { top, bottom, left, right, width, height };\r\n}\r\n\r\nexport const GridWall: React.FC<{ tile: Tile; floor: Floor; direction: Direction; hasDoor: boolean; opened: boolean; }> = props => {\r\n  const { direction, opened, hasDoor, tile, floor } = props;\r\n  const row = direction == \"TOP\" || direction == \"BOTTOM\";\r\n  const filler = <div style={{ flex: \"auto\", backgroundColor: \"#322\", height: row ? \"100%\" : undefined, width: row ? undefined : \"100%\" }}></div>;\r\n\r\n  return <div\r\n    style={{\r\n      ...getWallPosition(direction),\r\n      position: \"absolute\",\r\n      display: \"flex\",\r\n      flexDirection: row ? \"row\" : \"column\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      overflow: \"hidden\",\r\n    }}>\r\n    {filler}\r\n    {hasDoor ?\r\n      <div\r\n        style={{ cursor: opened ? undefined : \"pointer\", height: doorSize, width: doorSize, backgroundColor: opened ? \"\" : \"grey\" }}\r\n        onClick={opened ? undefined : () => {\r\n          floor.fillCoord(MoveCoord(tile.coord, direction));\r\n          RenderApp();\r\n        }}\r\n      >\r\n      </div>\r\n      : null}\r\n    {filler}\r\n  </div>;\r\n};\r\n","export type Direction = \"TOP\" | \"LEFT\" | \"RIGHT\" | \"BOTTOM\";\r\n\r\nexport function AllDirections(): Direction[] {\r\n  return [\"TOP\", \"RIGHT\", \"BOTTOM\", \"LEFT\"];\r\n}\r\n\r\nexport function Opposite(direction: Direction): Direction {\r\n  switch (direction) {\r\n    case \"TOP\":\r\n      return \"BOTTOM\";\r\n    case \"BOTTOM\":\r\n      return \"TOP\";\r\n    case \"RIGHT\":\r\n      return \"LEFT\";\r\n    case \"LEFT\":\r\n      return \"RIGHT\";\r\n  }\r\n}\r\n\r\nexport function Rotate(direction: Direction, rotation: number) {\r\n  const allDirections = AllDirections();\r\n  const index = allDirections.indexOf(direction);\r\n  return allDirections[(index + rotation) % allDirections.length];\r\n}\r\n","import { Coord, MoveCoord } from './Coord';\r\nimport { Direction, Rotate } from './Direction';\r\nimport { Floor } from './Floor';\r\n\r\ninterface TileInfo {\r\n  name: string;\r\n\r\n  doors: Direction[];\r\n}\r\n\r\nexport class Tile {\r\n  // Rotations RIGHT in 90 increments. 0-3;\r\n  //public rotation = 0; // TODO\r\n  public x = 0;\r\n  public y = 0;\r\n  private initialDoors: Set<Direction>;\r\n  private rotation = 0;\r\n\r\n  constructor(public readonly info: TileInfo) {\r\n    const { doors } = info;\r\n    this.initialDoors = new Set<Direction>(doors);\r\n  }\r\n\r\n  get coord(): Coord {\r\n    return { x: this.x, y: this.y };\r\n  }\r\n\r\n  get doors(): Set<Direction> {\r\n    const rotatedDoors = new Set<Direction>();\r\n    this.initialDoors.forEach(door => { rotatedDoors.add(Rotate(door, this.rotation)); });\r\n    return rotatedDoors;\r\n  }\r\n\r\n  /** Return valid rotations for the tile to be placed in a spot with the given constraints. */\r\n  // TODO: Handle ROTATION PROBABLY!\r\n  canPlace(neededDoors: Set<Direction>, neededWalls: Set<Direction>): boolean {\r\n    // TODO: Wait what about WALLS where we SHOULDNT have doors!\r\n    // ensure all needed doors are there\r\n    let canPlace = true;\r\n    neededDoors.forEach(direction => {\r\n      if (!this.doors.has(direction)) {\r\n        canPlace = false;\r\n      }\r\n    });\r\n\r\n    // ensure all needed walls have no doors!\r\n    neededWalls.forEach(direction => {\r\n      if (this.doors.has(direction)) {\r\n        canPlace = false;\r\n      }\r\n    });\r\n\r\n    return canPlace;\r\n  }\r\n\r\n  copy(r?: number) {\r\n    const t = new Tile(this.info);\r\n    if (r) {\r\n      t.rotate(r);\r\n    }\r\n    else {\r\n      t.rotate(this.rotation);\r\n    }\r\n    return t;\r\n  }\r\n\r\n  rotate(r: number) {\r\n    this.rotation = r % 4;\r\n    return this;\r\n  }\r\n\r\n  hasNeighbor(floor: Floor, direction: Direction): boolean {\r\n    // let neightbor: boolean; // Later we might want to be able to \"CLOSE\" doors again? skip for now.\r\n    return floor.hasCoord(MoveCoord(this.coord, direction));\r\n  }\r\n}\r\n","import { Tile } from './Tile';\r\n\r\nexport const FourWay = new Tile({ name: \"Fourway\", doors: [\"TOP\", \"LEFT\", \"RIGHT\", \"BOTTOM\"] });\r\nconst TeeWay = new Tile({ name: \"TeeWay\", doors: [\"TOP\", \"LEFT\", \"RIGHT\"] });\r\nconst Straight = new Tile({ name: \"Straight\", doors: [\"TOP\", \"BOTTOM\"] });\r\nconst LTurn = new Tile({ name: \"LTurn\", doors: [\"TOP\", \"RIGHT\"] });\r\nconst RTurn = new Tile({ name: \"RTurn\", doors: [\"TOP\", \"LEFT\"] });\r\nconst DeadEnd = new Tile({ name: \"DeadEnd\", doors: [\"TOP\"] });\r\n\r\nfunction AllWay(tile: Tile): Tile[] {\r\n  return [tile, tile.copy(1), tile.copy(2), tile.copy(3)];\r\n}\r\n\r\nfunction TwoWay(tile: Tile): Tile[] {\r\n  return [tile, tile.copy(1)];\r\n}\r\n\r\nexport const TileLibrary = [\r\n  ...TwoWay(FourWay),\r\n  ...TwoWay(Straight),\r\n  ...AllWay(TeeWay),\r\n  ...AllWay(LTurn),\r\n  ...AllWay(RTurn),\r\n  ...AllWay(DeadEnd),\r\n];\r\n","import { Coord, MoveCoord } from './Coord';\r\nimport { Direction, AllDirections, Opposite } from './Direction';\r\nimport { Tile } from './Tile';\r\nimport { TileLibrary, FourWay } from './RegisterTiles';\r\n\r\nexport function IndexCoord(c: Coord) { return Index(c.x, c.y); }\r\nexport function Index(x: number, y: number) { return `${x}, ${y}`; }\r\n\r\nexport class Floor {\r\n  constructor(public readonly name: string) { }\r\n\r\n  private grid = new Map<string, Tile>();\r\n\r\n\r\n  getCoord(c: Coord): Tile | undefined { return this.getTile(c.x, c.y); }\r\n  getTile(x: number, y: number): Tile | undefined { return this.grid.get(Index(x, y)); }\r\n\r\n  hasCoord(c: Coord): boolean { return this.hasTile(c.x, c.y); }\r\n  hasTile(x: number, y: number): boolean { return this.grid.has(Index(x, y)); }\r\n\r\n  setCoord(tile: Tile, c: Coord) { this.setTile(tile, c.x, c.y); }\r\n  setTile(tile: Tile, x: number, y: number) {\r\n    if (this.hasTile(x, y)) {\r\n      alert(\"Already had a tile there!\");\r\n      throw \"already had a tile!\";\r\n    }\r\n\r\n    tile.x = x;\r\n    tile.y = y;\r\n    this.grid.set(Index(x, y), tile);\r\n  }\r\n\r\n  get tiles(): Tile[] {\r\n    return Array.from(this.grid, ([key, tile]) => tile);\r\n  }\r\n\r\n  // return all POSSIBLE playing places\r\n  getValidSpotsForTiles() {\r\n    // this is maybe not the best approach. Cool ,but not needed right now...\r\n  }\r\n\r\n  fillCoord(c: Coord) { this.fillTile(c.x, c.y); }\r\n  fillTile(x: number, y: number) {\r\n    // fill a gap with a VALID tile. Woops do we need rotation soon?\r\n    // 1. get all tiles bordering this.\r\n    const neighbors = AllDirections().map(d => this.getCoord(MoveCoord({ x, y }, d)));\r\n    const neededDoors = new Set<Direction>();\r\n    const neededWalls = new Set<Direction>();\r\n\r\n    AllDirections().forEach(direction => {\r\n      const neighbor = this.getCoord(MoveCoord({ x, y }, direction));\r\n      if (neighbor) {\r\n        if (neighbor.doors.has(Opposite(direction))) {\r\n          neededDoors.add(direction);\r\n        }\r\n        else {\r\n          neededWalls.add(direction);\r\n        }\r\n      }\r\n    });\r\n\r\n    console.log(\"fill tile needs these doors:\", neededDoors, \"and these walls:\", neededWalls);\r\n\r\n    // now find available tiles\r\n    const matchingTiles = TileLibrary.filter(tile => tile.canPlace(neededDoors, neededWalls));\r\n    console.log(\"These tiles could fit here!\", matchingTiles);\r\n    // pick a random tile!\r\n    if (!matchingTiles) { throw \"wow we should really fix that!\"; }\r\n\r\n    const newTile = matchingTiles[Math.floor(Math.random() * matchingTiles.length)].copy();\r\n    console.log(\"adding new tile!\", newTile);\r\n    this.setTile(newTile, x, y);\r\n  }\r\n}\r\n\r\nexport const FirstFloor = new Floor(\"Main Floor\");\r\nFirstFloor.setTile(FourWay.copy(), 0, 0);\r\n","import React from 'react';\nimport './App.css';\nimport { GridTile } from './GridTile';\nimport { CollidePlayerWithWalls, Item } from './tiles/Collision';\nimport { FirstFloor, Index } from './tiles/Floor';\n\nexport let centerX = 0;\nexport let centerY = 0;\n\nexport var RenderApp = () => { };\n\nconst player: Item = {\n  position: { x: 0, y: 0 },\n  height: 30,\n  width: 15,\n}\n\nfunction Player() {\n  const hW = player.width * .5;\n  const hH = player.height * .5;\n  return <div style={{\n    position: \"absolute\",\n    zIndex: 50,\n    height: player.height,\n    width: player.width,\n    backgroundColor: \"red\",\n    left: `calc(50% - ${hW}px)`,\n    right: `calc(50% + ${hW}px)`,\n    top: `calc(50% - ${hH}px)`,\n    bottom: `calc(50% + ${hH}px)`,\n  }}>\n  </div>;\n}\n\nfunction App() {\n  const [, setState] = React.useState(0);\n  const rerender = React.useCallback(() => {\n    setState(Math.random());\n  }, [setState]);\n\n  React.useEffect(() => { RenderApp = rerender; }, [rerender]);\n  return (\n    <div className=\"App\" style={{ overflow: \"hidden\" }}>\n      {/*\n      <div style={{ zIndex: 100, bottom: 0, padding: 20, position: \"absolute\", left: 0, right: 0 }}>\n        <button onClick={() => { centerY -= 100; rerender(); }}>UP!</button>\n        <button onClick={() => { centerY += 100; rerender(); }}>DOWN!</button>\n        <button onClick={() => { centerX -= 100; rerender(); }}>LEFT!</button>\n        <button onClick={() => { centerX += 100; rerender(); }}>RIGHT!</button> \n        <button onClick={() => { centerX = 0; centerY = 0; rerender(); }}>CENTER!</button>\n      </div>\n      */}\n      <Player />\n\n      <div id=\"gamefloor\">\n        {FirstFloor.tiles.map((tile) => <GridTile\n          floor={FirstFloor}\n          tile={tile}\n          key={Index(tile.x, tile.y)}\n        />)}\n      </div>\n\n    </div>\n  );\n}\n\nlet leftPressed = false;\nlet upPressed = false;\nlet rightPressed = false;\nlet downPressed = false;\n\ndocument.addEventListener('keydown', e => {\n  //console.log(e.key);\n  if (e.key == \"a\" || e.key == \"A\" || e.key == \"ArrowLeft\") {\n    leftPressed = true;\n    rightPressed = false;\n  }\n  if (e.key == \"d\" ||e.key == \"D\" || e.key == \"ArrowRight\") {\n    rightPressed = true;\n    leftPressed = false;\n  }\n  if (e.key == \"w\" ||e.key == \"W\" || e.key == \"ArrowUp\") {\n    upPressed = true;\n    downPressed = false;\n  }\n  if (e.key == \"s\" ||e.key == \"S\" || e.key == \"ArrowDown\") {\n    downPressed = true;\n    upPressed = false;\n  }\n});\n\ndocument.addEventListener('keyup', e => {\n  //console.log(e.key);\n  if (e.key == \"a\" || e.key == \"A\" || e.key == \"ArrowLeft\") {\n    leftPressed = false;\n  }\n  if (e.key == \"d\" ||e.key == \"D\" || e.key == \"ArrowRight\") {\n    rightPressed = false;\n  }\n  if (e.key == \"w\" ||e.key == \"W\" || e.key == \"ArrowUp\") {\n    upPressed = false;\n  }\n  if (e.key == \"s\" ||e.key == \"S\" || e.key == \"ArrowDown\") {\n    downPressed = false;\n  }\n});\n\nconst moveSpeed = 2;\n\nfunction animate() {\n  if (leftPressed) {\n    player.position.x -= moveSpeed;\n  }\n  if (rightPressed) {\n    player.position.x += moveSpeed;\n  }\n  if (upPressed) {\n    player.position.y -= moveSpeed;\n  }\n  if (downPressed) {\n    player.position.y += moveSpeed;\n  }\n\n  // for now we are assuming the player is ALWAYS centered. \n  // This is probably bad and we may want to change it when we switch to a canvas based approach.\n\n  CollidePlayerWithWalls(player, FirstFloor);\n\n  // FOLLOW CAM\n  centerX = player.position.x;\n  centerY = player.position.y;\n\n\n  RenderApp();\n  requestAnimationFrame(() => animate());\n}\n\nanimate();\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}